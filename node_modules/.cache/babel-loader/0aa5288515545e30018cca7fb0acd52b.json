{"ast":null,"code":"var _jsxFileName = \"/Users/josephbianchi/Desktop/udemy/react/streams/client/src/components/streams/stream_list.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { fetchStreams } from '../../actions';\n\nclass StreamList extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => {\n      this.props.fetchStreams();\n    };\n\n    this.renderAdmin = stream => {\n      if (stream.userId === this.props.currentUserId) {\n        return React.createElement(\"div\", {\n          className: \"right floated content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"ui button primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        }, \"Edit\"), React.createElement(\"button\", {\n          className: \" ui button negative\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, \"Delete\"));\n      }\n    };\n\n    this.renderList = () => {\n      return this.props.streams.map(stream => {\n        return React.createElement(\"div\", {\n          className: \"item\",\n          key: stream.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, this.renderAdmin(stream), React.createElement(\"i\", {\n          className: \"large middle aligned icon camera\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, stream.title, React.createElement(\"div\", {\n          className: \"description\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, stream.description)));\n      });\n    };\n\n    this.renderCreate = () => {\n      if (this.props.isSignedIn) {\n        return React.createElement(\"div\", {\n          style: {\n            textAlign: 'right'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/streams/new\",\n          className: \"ui button primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, \"Create Stream\"));\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Streams\"), React.createElement(\"div\", {\n      className: \"ui celled list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.renderList()), this.renderCreate);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    streams: Object.values(state.streams),\n    currentUserId: state.auth.userId,\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStreams\n})(StreamList);","map":{"version":3,"sources":["/Users/josephbianchi/Desktop/udemy/react/streams/client/src/components/streams/stream_list.js"],"names":["React","connect","Link","fetchStreams","StreamList","Component","componentDidMount","props","renderAdmin","stream","userId","currentUserId","renderList","streams","map","id","title","description","renderCreate","isSignedIn","textAlign","render","mapStateToProps","state","Object","values","auth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SAASC,YAAT,QAA6B,eAA7B;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAEvCC,iBAFuC,GAEnB,MAAM;AACxB,WAAKC,KAAL,CAAWJ,YAAX;AACD,KAJsC;;AAAA,SAMvCK,WANuC,GAMxBC,MAAD,IAAY;AACxB,UAAIA,MAAM,CAACC,MAAP,KAAkB,KAAKH,KAAL,CAAWI,aAAjC,EAAgD;AAC9C,eACE;AAAK,UAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAQ,UAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAIE;AAAQ,UAAA,SAAS,EAAC,qBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,CADF;AAUD;AACF,KAnBsC;;AAAA,SAqBvCC,UArBuC,GAqB1B,MAAM;AACjB,aAAO,KAAKL,KAAL,CAAWM,OAAX,CAAmBC,GAAnB,CAAuBL,MAAM,IAAI;AACtC,eACE;AACE,UAAA,SAAS,EAAC,MADZ;AAEE,UAAA,GAAG,EAAEA,MAAM,CAACM,EAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIG,KAAKP,WAAL,CAAiBC,MAAjB,CAJH,EAKE;AAAG,UAAA,SAAS,EAAC,kCAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALF,EAME;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGA,MAAM,CAACO,KADV,EAEE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGP,MAAM,CAACQ,WADV,CAFF,CANF,CADF;AAeD,OAhBM,CAAP;AAiBD,KAvCsC;;AAAA,SAyCvCC,YAzCuC,GAyCxB,MAAM;AACnB,UAAI,KAAKX,KAAL,CAAWY,UAAf,EAA2B;AACzB,eACE;AAAK,UAAA,KAAK,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AAAM,UAAA,EAAE,EAAC,cAAT;AAAwB,UAAA,SAAS,EAAC,mBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,CADF;AAOD;AACF,KAnDsC;AAAA;;AAqDvCC,EAAAA,MAAM,GAAG;AAEP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKT,UAAL,EADH,CAFF,EAKG,KAAKM,YALR,CADF;AASD;;AAhEsC;;AAmEzC,MAAMI,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLV,IAAAA,OAAO,EAAEW,MAAM,CAACC,MAAP,CAAcF,KAAK,CAACV,OAApB,CADJ;AAELF,IAAAA,aAAa,EAAEY,KAAK,CAACG,IAAN,CAAWhB,MAFrB;AAGLS,IAAAA,UAAU,EAAEI,KAAK,CAACG,IAAN,CAAWP;AAHlB,GAAP;AAKD,CAND;;AAQA,eAAelB,OAAO,CAACqB,eAAD,EAAkB;AAAEnB,EAAAA;AAAF,CAAlB,CAAP,CAA2CC,UAA3C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { fetchStreams } from '../../actions';\n\nclass StreamList extends React.Component {\n\n  componentDidMount = () => {\n    this.props.fetchStreams();\n  }\n\n  renderAdmin = (stream) => {\n    if (stream.userId === this.props.currentUserId) {\n      return (\n        <div className=\"right floated content\">\n          <button className=\"ui button primary\">\n            Edit\n          </button>\n          <button className=\" ui button negative\">\n            Delete\n          </button>\n        </div>\n      )\n    }\n  }\n\n  renderList = () => {\n    return this.props.streams.map(stream => {\n      return (\n        <div\n          className=\"item\"\n          key={stream.id}\n        >\n          {this.renderAdmin(stream)}\n          <i className=\"large middle aligned icon camera\" />\n          <div className=\"content\">\n            {stream.title}\n            <div className=\"description\">\n              {stream.description}\n            </div>\n          </div>\n        </div>\n      )\n    })\n  }\n\n  renderCreate = () => {\n    if (this.props.isSignedIn) {\n      return (\n        <div style={{ textAlign: 'right' }}>\n          <Link to=\"/streams/new\" className=\"ui button primary\">\n            Create Stream\n          </Link>\n        </div>\n      )\n    }\n  }\n\n  render() {\n\n    return (\n      <div>\n        <h2>Streams</h2>\n        <div className=\"ui celled list\">\n          {this.renderList()}\n        </div>\n        {this.renderCreate}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    streams: Object.values(state.streams),\n    currentUserId: state.auth.userId,\n    isSignedIn: state.auth.isSignedIn\n  };\n}\n\nexport default connect(mapStateToProps, { fetchStreams })(StreamList)\n"]},"metadata":{},"sourceType":"module"}