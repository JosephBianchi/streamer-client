{"ast":null,"code":"var _jsxFileName = \"/Users/josephbianchi/Desktop/udemy/react/streams/client/src/components/streams/stream_show.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport flv from 'flv.js';\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentWillUnmount = () => {\n      this.player.destroy();\n    };\n\n    this.buildPlayer = () => {\n      if (this.player || !this.props.stream) {\n        return;\n      }\n\n      const id = this.props.match.params.id;\n      this.player = flv.createPlayer({\n        type: 'flv',\n        url: \"http://localhost:8000/live/\".concat(id, \".flv\")\n      });\n      this.player.attachMediaElement(this.videoRef.current);\n      this.player.load();\n    };\n\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.id;\n    this.props.fetchStream(id);\n    this.buildPlayer();\n  }\n\n  componentDidUpdate() {\n    this.buildPlayer();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    const _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: '100%'\n      },\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, title), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, description));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/josephbianchi/Desktop/udemy/react/streams/client/src/components/streams/stream_show.js"],"names":["React","connect","flv","fetchStream","StreamShow","Component","constructor","props","componentWillUnmount","player","destroy","buildPlayer","stream","id","match","params","createPlayer","type","url","attachMediaElement","videoRef","current","load","createRef","componentDidMount","componentDidUpdate","render","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAgBnBC,oBAhBmB,GAgBI,MAAM;AAC3B,WAAKC,MAAL,CAAYC,OAAZ;AACD,KAlBkB;;AAAA,SAoBnBC,WApBmB,GAoBL,MAAM;AAClB,UAAI,KAAKF,MAAL,IAAe,CAAC,KAAKF,KAAL,CAAWK,MAA/B,EAAuC;AACrC;AACD;;AAHiB,YAIXC,EAJW,GAIL,KAAKN,KAAL,CAAWO,KAAX,CAAiBC,MAJZ,CAIXF,EAJW;AAKlB,WAAKJ,MAAL,GAAcP,GAAG,CAACc,YAAJ,CAAiB;AAC7BC,QAAAA,IAAI,EAAE,KADuB;AAE7BC,QAAAA,GAAG,uCAAgCL,EAAhC;AAF0B,OAAjB,CAAd;AAIA,WAAKJ,MAAL,CAAYU,kBAAZ,CAA+B,KAAKC,QAAL,CAAcC,OAA7C;AACA,WAAKZ,MAAL,CAAYa,IAAZ;AACD,KA/BkB;;AAGjB,SAAKF,QAAL,GAAgBpB,KAAK,CAACuB,SAAN,EAAhB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAAA,UACXX,EADW,GACL,KAAKN,KAAL,CAAWO,KAAX,CAAiBC,MADZ,CACXF,EADW;AAElB,SAAKN,KAAL,CAAWJ,WAAX,CAAuBU,EAAvB;AACA,SAAKF,WAAL;AACD;;AAEDc,EAAAA,kBAAkB,GAAG;AACnB,SAAKd,WAAL;AACD;;AAmBDe,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKnB,KAAL,CAAWK,MAAhB,EAAwB;AACtB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AAHM,+BAKwB,KAAKL,KAAL,CAAWK,MALnC;AAAA,UAKCe,KALD,sBAKCA,KALD;AAAA,UAKQC,WALR,sBAKQA,WALR;AAOP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,GAAG,EAAE,KAAKR,QADZ;AAEE,MAAA,KAAK,EAAG;AAACS,QAAAA,KAAK,EAAE;AAAR,OAFV;AAGE,MAAA,QAAQ,MAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,KAAL,CANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,WAAL,CAPF,CADF;AAWD;;AApDsC;;AAuDzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AAAEpB,IAAAA,MAAM,EAAEmB,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAAClB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAV,GAAP;AACD,CAFD;;AAIA,eAAeZ,OAAO,CAAC6B,eAAD,EAAkB;AAAE3B,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,UAA1C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport flv from 'flv.js';\n\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.videoRef = React.createRef()\n  }\n\n  componentDidMount() {\n    const {id} = this.props.match.params;\n    this.props.fetchStream(id);\n    this.buildPlayer();\n  }\n\n  componentDidUpdate() {\n    this.buildPlayer();\n  }\n\n  componentWillUnmount = () => {\n    this.player.destroy();\n  }\n\n  buildPlayer = () => {\n    if (this.player || !this.props.stream) {\n      return\n    }\n    const {id} = this.props.match.params;\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}.flv`\n    })\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return <div>Loading...</div>\n    }\n\n    const { title, description } = this.props.stream\n\n    return (\n      <div>\n        <video\n          ref={this.videoRef}\n          style={ {width: '100%'} }\n          controls\n        />\n        <h1>{title}</h1>\n        <h5>{description}</h5>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { stream: state.streams[ownProps.match.params.id] }\n}\n\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);\n"]},"metadata":{},"sourceType":"module"}